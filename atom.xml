<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zoe's blog]]></title>
  <subtitle><![CDATA[宅学长的博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zt1991616.github.io/"/>
  <updated>2014-09-08T15:03:31.473Z</updated>
  <id>http://zt1991616.github.io/</id>
  
  <author>
    <name><![CDATA[Zoe]]></name>
    <email><![CDATA[developer.zhaitao@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android、iOS大不同(七)]]></title>
    <link href="http://zt1991616.github.io/2014/09/07/Android%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E4%B8%83)/"/>
    <id>http://zt1991616.github.io/2014/09/07/Android、iOS大不同(七)/</id>
    <published>2014-09-07T11:20:13.000Z</published>
    <updated>2014-09-07T12:27:58.000Z</updated>
    <content type="html"><![CDATA[<p>项目的文件结构上Android和iOS有很大的区别，注意点是iOS项目的文件是逻辑文件(并不一定和实际存放位置相同)<br><a id="more"></a></p>
<h2 id="iOS项目文件结构">iOS项目文件结构</h2>
<pre><code>├ <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 项目文件夹
    ├ <span class="keyword">*</span>.m <span class="keyword">*</span>.h 项目的代码源文件
    └ Supporting Files 资源文件夹，包含非源代码和资源文件
        ├ <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.plist 属性列表文件，保存iOS应用的各种相关信息
        ├ Info.strings 保存各种字符串的文本文件，主要用于程序国际化提供支持
        ├ main.m 包含main函数，应用程序的入口
        └ <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>-Prefix.pch 来自外部框架的头文件，是预编译的头文件。
├ <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>Tests 包含单元测试的相关类和资源
├ Frameworks 项目依赖的框架或库，也可以包含图像和声音等资源
└ Products 包含项目所生成的应用程序
</code></pre><h2 id="Android项目文件结构">Android项目文件结构</h2>
<pre><code>├ <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
    ├ src 存放代码源文件
    ├ lib 库文件
    ├ res 资源文件
        ├ values 存放字符串、颜色、尺寸等资源文件
        ├ layout 布局资源文件
        └ drawable 图片资源文件，可以是真实的图片，也可以是xml格式的配置图片
    └ AndroidManifest.xml 系统清单文件，控制Android应用的各项配置
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>项目的文件结构上Android和iOS有很大的区别，注意点是iOS项目的文件是逻辑文件(并不一定和实际存放位置相同)<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android、iOS大不同(六)]]></title>
    <link href="http://zt1991616.github.io/2014/09/06/Android%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E5%85%AD)/"/>
    <id>http://zt1991616.github.io/2014/09/06/Android、iOS大不同(六)/</id>
    <published>2014-09-06T01:32:06.000Z</published>
    <updated>2014-09-07T12:27:56.000Z</updated>
    <content type="html"><![CDATA[<p>协议或者接口，用于多个类应该遵守的规范。不需要提供实现，不关心内部的状态数据，体现了规范和实现分离的设计哲学。<br><a id="more"></a></p>
<h2 id="接口">接口</h2>
<p>在Java中实现此类设计的方法用接口(interface)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接口的定义</span></div><div class="line">[修饰符] interface 接口名 extends 父接口<span class="number">1</span>,父接口<span class="number">2.</span>..</div><div class="line">{</div><div class="line">	零到多个常量定义...</div><div class="line">	零到多个抽象方法定义...</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>修饰符采用public或缺省，即采用包权限或者外部权限</li>
<li>接口的命名与类相同</li>
<li>一个接口可以有多个直接父类，但接口只能继承接口<blockquote>
<p>在接口中定义的变量默认会被加上static和final成为静态常量，切所有的常量、方法、内部类、枚举类都是public权限</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Output</span></span></div><div class="line">{</div><div class="line">	<span class="keyword">int</span> MAX_CACHE = <span class="number">50</span>;</div><div class="line">	<span class="keyword">void</span> out();</div><div class="line">	<span class="keyword">void</span> getDate(String msg);</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="协议">协议</h2>
<p>在Objective-C中使用协议(protocol)实现该设计需求</p>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">protocol</span> 协议名 &lt;父协议<span class="number">1</span>,父协议<span class="number">2</span>...&gt;</span></div><div class="line">{</div><div class="line">	零到多个方法定义</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>命名规则与类相同</li>
<li>一个协议可以继承多个父协议，但是不能继承类</li>
<li>协议定义的方法不能有方法实现，即可以使类方法，也可以使实例方法</li>
</ul>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">Output</span></span></div><div class="line">- (<span class="keyword">void</span>)<span class="keyword">out</span>;</div><div class="line">- (<span class="keyword">void</span>)getDate(<span class="built_in">NSString</span>* msg);</div></pre></td></tr></table></figure>

<p>Obejctive-C可以指定关键字<code>@optional</code>、<code>@required</code>限定实现类是否必须实现该方法</p>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">Output</span></span></div><div class="line"><span class="keyword">@optional</span></div><div class="line">- (<span class="keyword">void</span>) output;</div><div class="line"><span class="keyword">@required</span></div><div class="line">- (<span class="keyword">void</span>) getDate (<span class="built_in">NSString</span>*) msg;</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>协议或者接口，用于多个类应该遵守的规范。不需要提供实现，不关心内部的状态数据，体现了规范和实现分离的设计哲学。<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android、iOS大不同(五)]]></title>
    <link href="http://zt1991616.github.io/2014/09/05/Android%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E4%BA%94)/"/>
    <id>http://zt1991616.github.io/2014/09/05/Android、iOS大不同(五)/</id>
    <published>2014-09-05T15:01:31.000Z</published>
    <updated>2014-09-07T12:26:09.000Z</updated>
    <content type="html"><![CDATA[<p>Objective-C特殊的键指编码(KOC)与监值兼听(KVO)<br><a id="more"></a></p>
<h2 id="键值编码(KVC)">键值编码(KVC)</h2>
<p>简直编码用来简化设置对象的属性的方法<br>最基本的KVC由NSKeyValueCode协议提供，最基本的操作属性的方法如下</p>
<ul>
<li><code>setValue:value forKey:key</code> 通过属性名来设置值</li>
<li><code>valueForKey</code> 通过属性名来获取属性值<br>在KVC中，调用以上方法存取属性值时，底层的机制如下：</li>
</ul>
<ol>
<li>优先使用setter、getter方法实现</li>
<li>不能实现，则搜索<code>_value</code>属性</li>
<li>不存在，则搜索<code>value</code>属性</li>
<li>都没找到，执行对象的setValue:forUndefinedKey:方法，或者valueforUndefinedKey:方法<blockquote>
<p>默认的setValue:forUndefineKey:方法和valueforUndefinedKey:方法会引发一个异常，这个异常会导致程序因为异常结束</p>
</blockquote>
</li>
</ol>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line">{</div><div class="line">	<span class="built_in">NSString</span>* name;</div><div class="line">	<span class="built_in">NSDate</span>* birth;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//main</span></div><div class="line">Person person = [[Person alloc] init];Í</div><div class="line">[person setValue:<span class="string">@"Zoe"</span> forKey:<span class="string">@"name"</span>];</div><div class="line">[person setValue:<span class="number">1</span> forKey:<span class="string">@"age"</span>];</div><div class="line">[person setValue:[[<span class="built_in">NSDate</span> alloc] init] forKey:<span class="string">@"birth"</span>];</div></pre></td></tr></table></figure>

<p>类中存在复合属性，就必须使用Key路径找到属性</p>
<ul>
<li>setValue: forKeyPath: 根据Key路径设置属性值</li>
<li>valueForKeyPath: 根据Key路径获取属性值</li>
</ul>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Order</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) Item* item;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span>* amout;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">Order* order = [[Order alloc] init];</div><div class="line">[order setValue:[[Item alloc] init] forKey:<span class="string">@"item"</span>];</div><div class="line">[order setValue:<span class="string">@"Zoe"</span> forKeyPath:<span class="string">@"item.name"</span>];</div></pre></td></tr></table></figure>

<h2 id="键值监听(KVO)">键值监听(KVO)</h2>
<p>键值监听(Key Value Observing)机制由<code>NSKeyValueObserving</code>协议提供支持，NSObject遵守了该协议。<br>该协议包含如下常用方法可用于注册静听器：</p>
<ul>
<li>addObserver:forKeyPath:optioncontext: 注册一个监听器用于监听指定的key路径</li>
<li>removeObserver:forKeyPath: 为key路径删除指定的监听器</li>
<li>removeObserver:forKeyPath:context: 为key路径删除指定的监听器，只是多一个context参数<br>在MVC模型中，很容易想到让View来监听数据Model的改变，作为监听的视图组建需要重写<code>observeValueForKeyPath:ofObject:context:</code>方法，还方法可以得到最新修改的数据。<br>KVO编程的步骤应该为：</li>
</ul>
<ol>
<li>为被监听对象注册监听器</li>
<li>重写监听器的observeValueForKeyPath:ofObject:change:context:方法</li>
</ol>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ItemView</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>) Item* item;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ItemView</span></span></div><div class="line"><span class="keyword">@synthesize</span> item = _item;</div><div class="line">- (<span class="keyword">void</span>)setItem:(Item *)item </div><div class="line">{</div><div class="line">	<span class="keyword">self</span>-&gt;_item = item;</div><div class="line">	[<span class="keyword">self</span><span class="variable">.item</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"name"</span> option:NSKeyValueObservingOptionNew context:<span class="literal">nil</span>];</div><div class="line">	[<span class="keyword">self</span><span class="variable">.item</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"price"</span> option:NSKeyValueObservingOptionNew context:<span class="literal">nil</span>];</div><div class="line">}</div><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object chang:(<span class="built_in">NSDictionary</span> *)change context:(<span class="keyword">void</span> *)context</div><div class="line">{</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"被修改的KeyPath%@"</span>,keypath);</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"被修改的对象为%@"</span>,object);</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"被修改的属性值%@"</span>,[chang objectForKey:<span class="string">@"new"</span>]);</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"被修改的上下文为%@"</span>,context);</div><div class="line">}</div><div class="line">- (<span class="keyword">void</span>)dealloc</div><div class="line">{</div><div class="line">	[<span class="keyword">self</span><span class="variable">.item</span> removeObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"name"</span>];</div><div class="line">	[<span class="keyword">self</span><span class="variable">.item</span> removeObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"price"</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>Objective-C特殊的键指编码(KOC)与监值兼听(KVO)<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android、iOS大不同(四)]]></title>
    <link href="http://zt1991616.github.io/2014/09/04/Android%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E5%9B%9B)/"/>
    <id>http://zt1991616.github.io/2014/09/04/Android、iOS大不同(四)/</id>
    <published>2014-09-04T11:01:55.000Z</published>
    <updated>2014-09-07T12:26:56.000Z</updated>
    <content type="html"><![CDATA[<p>存取方法，Java没有明确限定Class要由固定的存取方法，但是符合JavaBean格式的类，都应该提供setter、getter存取方法。而Objective-C 2.0开始，自动合成setter、getter方法。<br><a id="more"></a><br>Java中将成员变量限定为private，提供public的setter、getter存取方法，不再赘述。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span>(){</div><div class="line">		rerturn value;</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span>(value){</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在OC中，自动合成setter、getter方法分两步完成</p>
<ol>
<li>在类接口部分使用<code>@peoperty</code>指令定义属性</li>
<li>在类的实现部分使用<code>@synthesize</code>指令声明该属性<br>以上步骤不但会合成成对的setter和getter方法，还会自动在类中实现一个与getter方法同名的成员变量。<blockquote>
<p>Xcode 4.0编码规范推荐成员变量定义以下画线开头，在类实现部分使用<code>@synthesize property名 [= 成员变量]</code>指定成员变量名，如果没有指定，成员变量默认和property变量同名。</p>
</blockquote>
</li>
</ol>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span>* name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span>* pass;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSDate</span>* birth;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">User</span></span></div><div class="line"><span class="keyword">@synthesize</span> name =_name; <span class="comment">// 底层默认会实现_name</span></div><div class="line"><span class="keyword">@synthesize</span> pass; </div><div class="line"><span class="keyword">@synthesize</span> birth;</div><div class="line"><span class="comment">// 自定义实现一个setter</span></div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">{</div><div class="line">	<span class="keyword">self</span>-&gt;_name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"+++%@"</span>,name];</div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>在定义property时，可以增加一些指示符</p>
<ul>
<li>assign 简单赋值，不更改所附值的引用计数，适用于NSInteger等基础类，以及short、float、double、结构体等各种C数据类型</li>
<li>atomic(nonatomic) 是否原子操作，即是否保证线程安全，atomic是默认值</li>
<li>copy 指定被赋值的对象复制一个副本，将副本值赋给变量</li>
<li>getter、setter 自定义存取方法名，比如<code>@property(getter=abc,setter=xyz:)</code>，注setter方法要带参数不要忘记冒号</li>
<li>readonly、readwrite 只提供getter或者同时提供getter和setter</li>
<li>retain 在未开启ARC时，保证引用计数</li>
<li>strong、weak strong指定被赋值对象持有强引用，weak表示弱引用，只要强引用指向被赋值的对象，对象就不会被自动回收，若引用则不然</li>
<li>unsafa_unretained 与weak基本相熟，只是unsafa_unretained被回收后不会被赋为nil<br>只要属性完成了存取方法，OC就可以通过点语法来访问属性，本质上是用setter和getter来访问的</li>
</ul>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User <span class="literal">user</span> = [[User alloc] init]<span class="comment">;</span></div><div class="line"><span class="literal">user</span>.name = @<span class="string">"zoe"</span><span class="comment">;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>存取方法，Java没有明确限定Class要由固定的存取方法，但是符合JavaBean格式的类，都应该提供setter、getter存取方法。而Objective-C 2.0开始，自动合成setter、getter方法。<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fragment]]></title>
    <link href="http://zt1991616.github.io/2014/09/04/Fragment/"/>
    <id>http://zt1991616.github.io/2014/09/04/Fragment/</id>
    <published>2014-09-04T05:22:58.000Z</published>
    <updated>2014-09-05T15:06:35.000Z</updated>
    <content type="html"><![CDATA[<p>Fragment用于创建动态的、多窗口的交互体验<br><a id="more"></a></p>
<h2 id="创建一个Fragment">创建一个Fragment</h2>
<ul>
<li>必须重写<code>onCreateView()</code>回调方法来定义布局</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>{</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> View <span class="title">onCreateView</span>(LayoutInflater inflater,ViewGroup container,Budle savedInstanceState) {</div><div class="line">		<span class="keyword">return</span> inflater.inflate(R.layout.article_view,container,<span class="keyword">false</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>当activity的onPause()方法被调用时，它里面的所有fragment的onPause()方法都会被触发<h2 id="用XML将fragment添加到Activity">用XML将fragment添加到Activity</h2>
</li>
<li>frament是可以重用的，每一个Fragment的实例都必须与一个FragmentActivity关联</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">fragment</span> <span class="attribute">android:name</span>=<span class="value">"com.example.android.fragments.HeadlinesFragment"</span></span></div><div class="line">              <span class="attribute">android:id</span>=<span class="value">"@+id/headlines_fragment"</span></div><div class="line">              <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></div><div class="line">              <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span></div><div class="line">              <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">fragment</span> <span class="attribute">android:name</span>=<span class="value">"com.example.android.fragments.ArticleFragment"</span></span></div><div class="line">              <span class="attribute">android:id</span>=<span class="value">"@+id/article_fragment"</span></div><div class="line">              <span class="attribute">android:layout_weight</span>=<span class="value">"2"</span></div><div class="line">              <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span></div><div class="line">              <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<ul>
<li>FragmentActivity是Support Library提供的一个特殊的Activity，用来在API11版本以下的系统处理Fragment，如果版本大于11，可以使用普通的Activity</li>
<li>使用V7 appcompat library时，activity应该改为继承ActionBarActivity<blockquote>
<p>注：使用XML布局的方式将Fragment添加到Activity时，Fragment是不能被动态移除的</p>
<h2 id="动态添加">动态添加</h2>
<p>FragmentManager类提供了方法，在Activity运行时能够对Fragment进行添加、移除、替换</p>
</blockquote>
</li>
<li>为了执行Fragement的增加或移除操作，必须使用<code>FragmentManager</code>创建一个<code>FragmentTransaction</code>对象，它提供了增加、移除、替换以及其他一些操作的APIs</li>
<li>运行Fragment必须有一个容器View，Activity必须提供</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">FrameLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">	<span class="attribute">android:id</span>=<span class="value">"@+id/fragment_container"</span></div><div class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>

<ul>
<li>在Activity中，使用getSupportFragmentManager()方法获取FragmentManage对象，然后调用beginTransaction()方法创建FragmentTransaction对象，然后调用add()方法天剑fragment</li>
<li>使用同一个FragmentTansaction进行多次Fragment事务，完成操作必须调用commit()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>{</div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle saveInstanceState)</div><div class="line">	{</div><div class="line">		<span class="keyword">super</span>.onCreate(saveInstanceState);</div><div class="line">		setContentView(R.layout.news_articles);</div><div class="line">		<span class="keyword">if</span>(findViewById(R.id.fragment_container) != <span class="keyword">null</span>){</div><div class="line">			<span class="keyword">if</span> (saveInstanceState != <span class="keyword">null</span>) {</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			}</div><div class="line">		}</div><div class="line">		HeadlinesFragment firstFragment = <span class="keyword">new</span> HeadelinesFragment();</div><div class="line">		firstFragment.setArguments(getIntent().getExtras());</div><div class="line">		getSupportFragmentManager().beginTransaction().add(R.id.fragment_container,firstFragment).commit();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Fragment替换">Fragment替换</h2>
<ul>
<li>使用<code>replace()</code>方法来替换Fragment</li>
<li>为了向后导航与撤销，在FragemntTransaction提交前调用<code>addToBackStack()</code>方法<blockquote>
<p>当移除或替换一个Fragment并把它放回到返回站中时，被移除的Fragment的生命周期是stopped，当用户返回重新恢复这个Fragment，它的生命周期的restarts。如果没有放入返回栈，移除或替换时，它就被destoryed了</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ArticleFragement newFragment = <span class="keyword">new</span> AricleFragment();</div><div class="line">Bundle args = <span class="keyword">new</span> Bundle();</div><div class="line">args.putInt(ArticleFragment.ARG_POSITION,postion);</div><div class="line">newFragment.setArguments(args);</div><div class="line">FramentTransaction transaction = getSupportFragmentManager().beginTransacation();</div><div class="line">transaction.replace(R.id.fragment_container,newFragment);</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure>

<ul>
<li>addToBackStack()方法提供了一个可选的String参数为事务指定一个唯一的名字，为了使用<code>FragmentManager.BackStackEntry</code>APIs的一些高级Fragment的操作作准备<h2 id="Fragment之间的交互">Fragment之间的交互</h2>
为了更好的实现逻辑，Fragmet之间的交互需要通过它们关联的Activity，Fragment之间不能直接交互<h3 id="定义一个接口">定义一个接口</h3>
</li>
<li>为了让Fragment与Activity交互，可以在Fragment类中定义一个接口，在Activity中实现这个接口，Fragment在透明度生命周期的<code>onAttach</code>方法中捕获接口的实现，通过调用接口方法来与Activity交互</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadlinesFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>{</div><div class="line">	OnHeadlineSelectedListener mCallback;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">onHeadlineSelectedLinstener</span> </span>{</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArticleSelected</span>(<span class="keyword">int</span> position);	</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span>(Activity activiy) {</div><div class="line">		<span class="keyword">super</span>.onAttach(activity);</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			mCallback = (OnHeadlineSelectedListener)activity;</div><div class="line">		} <span class="keyword">catch</span> (ClassCastException e) {</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(activity.toString() + <span class="string">" must implement OnHeadlineSelectedListener"</span>);</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="comment">// .... 列表被点击，传递给父Activity</span></div><div class="line">	<span class="annotation">@Overrid</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span>(ListView l,View v,<span class="keyword">int</span> position,<span class="keyword">long</span> id) {</div><div class="line">		mCallback.onArticleSelected(position);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="实现接口">实现接口</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">HeadlinesFragments</span>.<span class="title">onHeadlineSelectedLinstener</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAricleSelected</span>(<span class="keyword">int</span> postion) {</div><div class="line">		<span class="comment">// 处理部分</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="传递消息给Fragment">传递消息给Fragment</h3>
<ul>
<li>宿主Activity通过<code>findFragmentById()</code>方法来获取<code>Fragment</code>实例，然后调用Fragment的public方法来向Fragment来传递消息</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> claa MainActivity extends FragmentActivity implements HeadlinesFragments.onHeadlineSelectedLinstener {</div><div class="line">	<span class="comment">//...承接上部分</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArticleSelected</span>(<span class="keyword">int</span> position) {</div><div class="line">        ArticleFragment articleFrag = (ArticleFragment)getSupportFragmentManager().findFragmentById(R.id.article_fragment);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (articleFrag != <span class="keyword">null</span>) {</div><div class="line">            articleFrag.updateArticleView(position);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            ArticleFragment newFragment = <span class="keyword">new</span> ArticleFragment();</div><div class="line">            Bundle args = <span class="keyword">new</span> Bundle();</div><div class="line">            args.putInt(ArticleFragment.ARG_POSITION, position);</div><div class="line">            newFragment.setArguments(args);</div><div class="line"></div><div class="line">            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">            transaction.replace(R.id.fragment_container, newFragment);</div><div class="line">            transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">            transaction.commit();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>Fragment用于创建动态的、多窗口的交互体验<br>]]></summary>
    
      <category term="Fragment" scheme="http://zt1991616.github.io/tags/Fragment/"/>
    
      <category term="动态交互" scheme="http://zt1991616.github.io/tags/%E5%8A%A8%E6%80%81%E4%BA%A4%E4%BA%92/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Androird、iOS大不同(三)]]></title>
    <link href="http://zt1991616.github.io/2014/09/03/Androird%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E4%B8%89)/"/>
    <id>http://zt1991616.github.io/2014/09/03/Androird、iOS大不同(三)/</id>
    <published>2014-09-03T13:54:57.000Z</published>
    <updated>2014-09-07T12:27:52.000Z</updated>
    <content type="html"><![CDATA[<p>隐藏和封装<br><a id="more"></a><br>封装是面向对象的三大特征(另两个是多态和继承)，封装指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部的信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。其目的是：</p>
<ul>
<li>隐藏类的实现细节</li>
<li>使用时只能通过事先预定的方法来访问数据，限制不合理的访问，符合设计逻辑</li>
<li>进行数据监测，保证对象信息的完整性</li>
<li>便于修改提高可维护性<h2 id="访问控制符">访问控制符</h2>
Objective-C提供了4个访问控制符<code>@private</code>、<code>@package</code>、<code>@protected</code>、<code>@public</code></li>
<li>@private(当前类访问权限) 只能在当前类的内部访问，在类的实现部分定义的成员变量默认使用这个访问权限</li>
<li>@oackage(与映像访问权限) 可以在当前类以及当前类实现的同一个映像的任意地方访问</li>
<li>@protected(子类访问权限) 可以在当前类和当前类的子类的任意地方访问，在类的接口部分定义的成员变量默认使用这种访问权限</li>
<li>@public(公共访问权限) 可以在任意地方访问</li>
</ul>
<figure class="highlight objective"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObejct</span></span></div><div class="line">{</div><div class="line">	<span class="keyword">@private</span></div><div class="line">	<span class="built_in">NSString</span>* _name;</div><div class="line">	<span class="keyword">int</span> _age;</div><div class="line">}</div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name;</div><div class="line">- (<span class="built_in">NSString</span> *)getName;</div><div class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age;</div><div class="line">- (<span class="keyword">int</span>)getAge;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>([name length] &gt; <span class="number">6</span> || [name length] &lt; <span class="number">2</span>)</div><div class="line">	{</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">else</span></div><div class="line">	{</div><div class="line">		_name = name;</div><div class="line">	}</div><div class="line">}</div><div class="line">- (NSSting *)getName</div><div class="line">{</div><div class="line">	<span class="keyword">return</span> _name;</div><div class="line">}</div><div class="line">- (<span class="keyword">void</span>) setAge:(<span class="keyword">int</span>)age</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(age != _age)</div><div class="line">	{</div><div class="line">		<span class="keyword">if</span>(age &gt; <span class="number">100</span> || age &lt; <span class="number">0</span>)</div><div class="line">		{</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">else</span></div><div class="line">		{</div><div class="line">			_age = age;</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line">- (<span class="keyword">int</span>) getAge</div><div class="line">{</div><div class="line">	<span class="keyword">return</span> _age;</div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>Java中也提供了4个访问控制符<code>private</code>、<code>default</code>、<code>protected</code>、<code>public</code></p>
<ul>
<li>private 提供了类内部的访问权限</li>
<li>dufault 是默认的权限，同一包中和类内部可以访问</li>
<li>protected 提供了同类，同包和子类的访问权限</li>
<li>public 提供了外部访问权限，即可再任意地方访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(String name){</div><div class="line">		<span class="keyword">if</span>(name.length() &gt;<span class="number">6</span> || name.lenth()&lt;<span class="number">2</span>){</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}<span class="keyword">else</span>{</div><div class="line">			<span class="keyword">this</span>.name = name;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> String <span class="title">getName</span>(){</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="keyword">int</span> age){</div><div class="line">		<span class="keyword">if</span>(age &gt; <span class="number">100</span> || age &lt; <span class="number">0</span>){</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}<span class="keyword">else</span>{</div><div class="line">			<span class="keyword">this</span>.age = age;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="title">getAge</span>(){</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>隐藏的目的是为了封装类，达到程序的模块化，实现高内聚(功能实现细节在模块内部完成，不允许外部干预)，低耦合(尽量少地暴露方法给外部使用)</p>
]]></content>
    <summary type="html"><![CDATA[<p>隐藏和封装<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Androird、iOS大不同(二)]]></title>
    <link href="http://zt1991616.github.io/2014/09/01/Androird%E3%80%81iOS%E5%A4%A7%E4%B8%8D%E5%90%8C(%E4%BA%8C)/"/>
    <id>http://zt1991616.github.io/2014/09/01/Androird、iOS大不同(二)/</id>
    <published>2014-09-01T11:04:07.000Z</published>
    <updated>2014-09-07T12:26:38.000Z</updated>
    <content type="html"><![CDATA[<p>面向对象的一些知识点<br><a id="more"></a></p>
<h2 id="代表对象自己的">代表对象自己的</h2>
<p>Java使用<code>this</code>表示对象自己</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.age = <span class="number">10</span>;</div><div class="line"><span class="keyword">this</span>.run();</div></pre></td></tr></table></figure>

<p>而Objective-C使用<code>self</code>代表</p>
<figure class="highlight objective-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>-&gt;age = <span class="number">10</span>;</div><div class="line">[<span class="keyword">self</span> run];</div></pre></td></tr></table></figure>

<h2 id="通用类型">通用类型</h2>
<p>JAVA中，所有类都默认继承Object，所以可以用Object代表所有对象的类型。<br>Objective-C中，所有对象都继承NSObejct，而且Objective-C提供了一个id类型，可以代表所有对象的类型。<br>当通过id类型的变量来跟踪对象的所属的类，它会在运行时判断该对象所属的类，并在运行时确定需要的动态调用方法。</p>
<figure class="highlight objective-C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="property">id</span> p = [[Person alloc] init];</div><div class="line">[p <span class="command">say</span>:@<span class="string">"你好!"</span>];</div></pre></td></tr></table></figure>

<h2 id="方法">方法</h2>
<p>Obejective-C和Java中，类是一等公民，所有的方法都不能独立存在，方法必须属于类或者对象。<br>在Java中，被<code>static</code>限定的就是类方法;Objective-C中，类方法用<code>+</code>标识。</p>
<ul>
<li>方法只能在类中定义，不能单独存在</li>
<li>方法要么属于类本身，要么属于类的一个对象</li>
<li>永远不能单独执行方法，执行方法必须使用类或者对象作为调用者</li>
</ul>
<h2 id="参数可变的方法">参数可变的方法</h2>
<p>在java中，最后一个参数的变量类型后增加<code>...</code>即可表示方法接受可变参数<br>参数可以视为一个数组处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span>(<span class="keyword">int</span> x,<span class="keyword">int</span>... args)</div><div class="line">{</div><div class="line">	<span class="keyword">int</span> sum = x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length ; i ++)</div><div class="line">	{</div><div class="line">		sum += args[i];</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在Obejctive-C中，最后一个形参后增加<code>,...</code>(逗号三点)表示方法可接受对个参数值<br>为了获取可变形参，可以使用如下关键字</p>
<ul>
<li>va_list 类型，定义可变参数列表的指针变量</li>
<li>va_start 函数，该函数指定开始处理可变形参的列表，并让指针变量指向可变形参列表的第一个参数</li>
<li>va_end 函数，结束处理，释放指针变量</li>
<li>var_arg 函数，返回获取指针指向的参数的值，并一定指针到下一个参数</li>
</ul>
<figure class="highlight objective-C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@interface VarArgs : NSObject</div><div class="line">- (void)test:(NSString *) name ,<span class="keyword">...</span>;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation VarArgs</div><div class="line">- (void)test:(NSString *) name ,<span class="keyword">...</span></div><div class="line">{</div><div class="line">	va_list argList;</div><div class="line">	<span class="keyword">if</span>(name)</div><div class="line">	{</div><div class="line">		va_start(argList,name);</div><div class="line">		NSString* arg = va_arg(argList,id);</div><div class="line">		<span class="keyword">while</span>(arg){</div><div class="line">			NSLog(@<span class="string">"%@"</span>,arg);</div><div class="line">			arg = va_(argList,id);</div><div class="line">		}</div><div class="line">		va_end(argList);</div><div class="line">	}</div><div class="line">}</div><div class="line">@end</div></pre></td></tr></table></figure>

<h2 id="类变量">类变量</h2>
<p>Java中类定义时，使用static限定的变量，就是类变量<br>Objective-C不支持真正意义上的泪变量，一般通过内部全局变量来模拟变量</p>
<figure class="highlight objective-C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span>* nation = <span class="literal">nil</span>;</div><div class="line">+(<span class="built_in">NSString</span>*) nation</div><div class="line">{</div><div class="line">	<span class="keyword">return</span> nation;</div><div class="line">}</div><div class="line">+(<span class="keyword">void</span>)setNation:(<span class="built_in">NSString</span>*)newNation</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(![nation isEqualToString: newNation])</div><div class="line">	{</div><div class="line">		nation = newNation;</div><div class="line">	}	</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="单例模式">单例模式</h2>
<p>如果一个类只能创建一个类型，则这个类被称为单例类<br>在Java中使用private隐藏构造方法，只暴露<code>getInstance()</code>方法来获取对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletion</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="title">Singletion</span>() {</div><div class="line"></div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>() {</div><div class="line">		<span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) {</div><div class="line">			uniqueInstance = <span class="keyword">new</span> Singleton();</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> uniqueInstance;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Objective-C通过static全局变量定义单例指针</p>
<figure class="highlight objective-C"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Singleton</span> : <span class="title">NSObject</span></span></div><div class="line">+(<span class="keyword">id</span>) instance;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// .m</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance = <span class="literal">nil</span>;</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></div><div class="line">+ (<span class="keyword">id</span>) instance</div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(!instance)</div><div class="line">	{</div><div class="line">		instance = [[<span class="keyword">super</span> alloc] init];</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> instance;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>面向对象的一些知识点<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/tags/iOS/"/>
    
      <category term="Java" scheme="http://zt1991616.github.io/tags/Java/"/>
    
      <category term="Objective-C" scheme="http://zt1991616.github.io/tags/Objective-C/"/>
    
      <category term="大不同" scheme="http://zt1991616.github.io/tags/%E5%A4%A7%E4%B8%8D%E5%90%8C/"/>
    
      <category term="iOS" scheme="http://zt1991616.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Serializable和Parcelable实现序列化]]></title>
    <link href="http://zt1991616.github.io/2014/09/01/Serializable%E5%92%8CParcelable%E5%AE%9E%E7%8E%B0%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://zt1991616.github.io/2014/09/01/Serializable和Parcelable实现序列化/</id>
    <published>2014-09-01T02:48:40.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>序列化是为了将对象转换成字节序列保存到本地或者在网络中、进程或Activity间传递对象。<br><a id="more"></a><br>Android中自定义的对象序列化可以选择<code>Parcelable</code>或者<code>Serializable</code>来解决。</p>
<h2 id="区别">区别</h2>
<ol>
<li>在使用内存时，Parcelable比Serializable的性能高</li>
<li>Serializable在序列化的过程中产生大量的临时变量，从而引起频繁的GC</li>
<li>Parceable不能使用在数据存储在磁盘的情况</li>
<li>Serialzable接口是Java SE支持的，Parcelable是Android特有的功能</li>
</ol>
<h2 id="实现">实现</h2>
<ul>
<li>Serializable的实现与使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></div><div class="line">{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> width;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="keyword">int</span> width){</div><div class="line">		<span class="keyword">this</span>.width = width;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="keyword">int</span> height){</div><div class="line">		<span class="keyword">this</span>.height = height;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){</div><div class="line">		Box box = <span class="keyword">new</span> Box();</div><div class="line">		box.setWidth(<span class="number">50</span>);</div><div class="line">		box.setHeight(<span class="number">30</span>);</div><div class="line">		<span class="keyword">try</span>{</div><div class="line">			FileOutputStream fs = <span class="keyword">new</span> FileOutputStream(<span class="string">"foo.ser"</span>);     </div><div class="line">          	ObjectOutputStream os =  <span class="keyword">new</span> ObjectOutputStream(fs);     </div><div class="line">            os.writeObject(myBox);     </div><div class="line">           	os.close();     </div><div class="line">         }<span class="keyword">catch</span>(Exception ex){     </div><div class="line">            ex.printStackTrace();     </div><div class="line">         }     </div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Parcelable<br>实现Parcelable接口的实例，可以将自身的数据信息写入一个Parcel对象，也可以从Parcel中恢复到对象的状态。<br>Parcel提供了一系列的方法帮助写入数据与读取数据</li>
</ul>
<ol>
<li>obtain()：在池中获取一个新的Parcel</li>
<li>dataSize()：得到当前Parcel对象的实际存储空间</li>
<li>dataPosition()：获取当前Parcel对象的偏移量</li>
<li>setDataPosition()：设置当前Parcel对象的偏移量</li>
<li>recyle()：清空、回收当前Parcel对象的内存</li>
<li>writeXxx()：向当前Parcel对象写入数据，具有多种重载</li>
<li>readXxx()：从当前Parcel对象读取数据，具有多种重载<br>简而言之，Parcelable通过writeToParcel()方法，对复杂对象的数据写入Parcel的方法进行对象序列化，需要的时候，通过定义的静态属性CREATOR.createFromParcel()进行反序列化的操作。Parcelable对Parcel进行包装，其内部就是通过Parcel进行序列化与反序列化</li>
</ol>
<ul>
<li>实现Parcelable接口<br>Parcelable必须要实现的抽象方法：<ul>
<li>abstract int describeContents():返回一个位掩码，表示一组特殊对象类型的Parcelable，一般返回0即可</li>
<li>abstract void writeToParcel(Parcel dest,int flags):实现对象的序列化，通过Parcel的一系列writeXxx()方法序列化对象</li>
<li>abstract T createFromParcel(Parcel source):通过source对象，根据writeToParcel()方法序列化的数据，反序列化一个Parcelable对象</li>
<li>abstract T[] newArray(int size):创建一个新的Parcelable对象的数组<br>类中定义一个名为<code>CREATOR</code>类型为Parcelable.Create<t>的泛型静态属性，实现对象的反序列化</t></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span>() {</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span>(Parcel dest,<span class="keyword">int</span> flags) {</div><div class="line">	<span class="comment">// 序列化</span></div><div class="line">	dest.writeInt(id);</div><div class="line">	dest.writeString(msgText);</div><div class="line">	dest.writeString(fromName);</div><div class="line">	dest.writeString(fromName);</div><div class="line">	dest.writeString(date);</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Message&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Message&gt;() {</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> Message[] <span class="keyword">new</span> <span class="title">Array</span>(<span class="keyword">int</span> size){</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Message[size];</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> Message <span class="title">createFromParcel</span>(Parcel source){</div><div class="line">	<span class="comment">// 反序列化 顺序要与序列化时相同</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Message(source.readInt(),source.readString(),source.readString()source.readString());</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>序列化是为了将对象转换成字节序列保存到本地或者在网络中、进程或Activity间传递对象。<br>]]></summary>
    
      <category term="Serializable" scheme="http://zt1991616.github.io/tags/Serializable/"/>
    
      <category term="Parcelable" scheme="http://zt1991616.github.io/tags/Parcelable/"/>
    
      <category term="序列化" scheme="http://zt1991616.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git回退]]></title>
    <link href="http://zt1991616.github.io/2014/08/31/git%E5%9B%9E%E9%80%80/"/>
    <id>http://zt1991616.github.io/2014/08/31/git回退/</id>
    <published>2014-08-30T16:30:11.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>git回退功能<br><a id="more"></a><br>使用git log查看提交日志<br>使用git git reset —hard HEAD^ 退回到上一次提交<br>使用git reset —hard 3628164退回到指定版本</p>
]]></content>
    <summary type="html"><![CDATA[<p>git回退功能<br>]]></summary>
    
      <category term="git" scheme="http://zt1991616.github.io/tags/git/"/>
    
      <category term="Prose" scheme="http://zt1991616.github.io/categories/Prose/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android动画]]></title>
    <link href="http://zt1991616.github.io/2014/08/29/Android%E5%8A%A8%E7%94%BB/"/>
    <id>http://zt1991616.github.io/2014/08/29/Android动画/</id>
    <published>2014-08-29T03:30:11.000Z</published>
    <updated>2014-09-05T15:06:35.000Z</updated>
    <content type="html"><![CDATA[<p>Android 3.0之后的动画框架<br><a id="more"></a></p>
<h2 id="分类">分类</h2>
<ul>
<li>Property Animation 属性动画<br>几乎可以让任何对象动起来，它使一个框架，在一个时间内，使用指定的内插技术来影响任何对象的属性</li>
<li>View Animation<ul>
<li>Tween Animation 补间动画 应用于View可以定义一系列位置、大小、旋转和透明度的改变</li>
<li>Frame Animation 帧动画 基于单元格的动画，每一帧显示一个不同的Drawable。帧动画可以在一个View中显示，并使用它的Canvas作为投影屏幕<h3 id="Property_Animation">Property Animation</h3>
在Android 3.0(API level 11)引入，通过一个属性动画生成器，在一个给定时间内使用设定的差值算法将属性从一个值转换到另一个值。<br>属性动画设定了规定时间内修改对象的属性，比如背景色和alpha值等，从简单的View效果，如移动、缩放、View的淡入淡出，到复杂的动画，如运行时的布局改变、曲线变换。<br>可以用xml定义，存放路径为：res/animator/filename.xml<br>可以通过资源的形式引用：R.animator.filename(in java)、@[package:]animator/file<br>常用的java类包括：ValueAnimator,ObjectAnimator,AnimatorSet</li>
</ul>
</li>
<li>XML文件格式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- together为同时播放 sequenttially为按顺序播放 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">android:ordering</span>=<span class="value">["together"|"sequentially"]</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">objectAnimator</span></span></div><div class="line">        <span class="attribute">android:propertyName</span>=<span class="value">"String"</span></div><div class="line">        <span class="attribute">android:duration</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:valueFrom</span>=<span class="value">"float|int|color"</span></div><div class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"float|int|color"</span></div><div class="line">        <span class="attribute">android:startOffset</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:repeatCount</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:repeatMode</span>=<span class="value">["repeat"|"reverse"]</span></div><div class="line">        <span class="attribute">android:valueType</span>=<span class="value">["intType"|"floatType"]</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">animator</span></span></div><div class="line">        <span class="attribute">android:duration</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:valueFrom</span>=<span class="value">"float|int|color"</span></div><div class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"float|int|color"</span></div><div class="line">        <span class="attribute">android:startOffset</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:repeatCount</span>=<span class="value">"int"</span></div><div class="line">        <span class="attribute">android:repeatMode</span>=<span class="value">["repeat"|"reverse"]</span></div><div class="line">        <span class="attribute">android:valueType</span>=<span class="value">["intType"|"floatType"]</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></div></pre></td></tr></table></figure>

<ol>
<li>创建属性动画<br>最简单的方法为使用ObjectAnimator类，这个类包含有offFloat、ofInt和ofObejct静态方法，可以将目标对象的特定属性在制定的值之间进行转换：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String propertyName = <span class="string">"alpaha"</span>;</div><div class="line"><span class="keyword">float</span> from = <span class="number">1</span>f;</div><div class="line"><span class="keyword">float</span> to <span class="number">0</span>f;</div><div class="line">ObjectAnimator anim = ObjectAnimator.ofFloat(targetObject,propertyName,from,to);</div></pre></td></tr></table></figure>

<blockquote>
<p>该对象必须包含getter/setter方法，所以上面实例targetObject必须有getAlpha和setAlpha方法，返回和接受一个浮点型数值<br>作于与非整数和非浮点数类型的属性时，对象要求提供一个<code>TypeEvaluator类</code>的实现，实现evaluate方法以返回一个对象，该对象是当动画为开始对象和结束对象之间动画的制定部分时应该返回的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TypeEvaluator&lt;MyClass&gt; evaluator = <span class="keyword">new</span> TypeEvaluator&lt;MyClass&gt;() {</div><div class="line">  <span class="keyword">public</span> MyClass <span class="title">evaluate</span>(<span class="keyword">float</span> fraction,MyClass startValue,MyClass endValue){</div><div class="line">    MyClass result = <span class="keyword">new</span> MyClass();</div><div class="line">    <span class="comment">// 修改心对象，使之代表开始值和结束值之间的给定部分</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  }  </div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">ValueAnimator oa = ObjectAnimator.ofObject(evaluator,myClassFromInstance,myClassToInstance);</div><div class="line">oa.setTarget(myClassInstance);</div><div class="line">oa.start();</div></pre></td></tr></table></figure>

<p>默认情况下，每个动画只运行300ms并且只运行一次。使用<code>setDuration</code>方法改变用来完成一次转换的差值器的总时间，使用<code>setRepeatCount(ValueAnimator.INFINITE)</code>制定运行次数，使用<code>setRepeatMode(ValueAnimator.REVERSE)</code>设置重复模式。<br>通过XML设置动画</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">objectAnimator</span> <span class="attribute">xmlns</span>=<span class="value">android="http:</span>//<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res</span>/<span class="attribute">android</span>"</span></div><div class="line">    <span class="attribute">android:valueTo</span>=<span class="value">"0"</span></div><div class="line">    <span class="attribute">android:propertyName</span>=<span class="value">"alpha"</span></div><div class="line">    <span class="attribute">android:duration</span>=<span class="value">"500"</span></div><div class="line">    <span class="attribute">android:valueType</span>=<span class="value">"floatType"</span></div><div class="line">    <span class="attribute">android:repeatConut</span>=<span class="value">"-1"</span></div><div class="line">    <span class="attribute">android:repeatMode</span>=<span class="value">"reverse"</span>/&gt;</div></pre></td></tr></table></figure>

<p>通过XML载入动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AnimatorSet set = (AnimatorSet)AnimatorInflater.loadAnimator(myContext,R.anim.property_animator);</div><div class="line">set.setTarget(myObject);</div><div class="line">set.start();</div></pre></td></tr></table></figure>

<ol>
<li>创建属性动画集<br>Android包含有AnimatorSet类，用来创建复杂、互相关联的动画<br>想要向一个动画集中添加一个新的动画，可以使用play方法，这个方法返回一个<code>AnimatorSet.Builder</code>对象，通过它可以指定相对于其他动画何时播放指定的动画</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AnimatorSet mySet = <span class="keyword">new</span> AnimatorSet();</div><div class="line">mySet.play(firstAnimation).before(concurrentAnim1);</div><div class="line">mySet.play(concurent1Anim1).with(concurrentAnim2);</div><div class="line">mySet.play(lastAnim).after(concurrentAnim2);</div></pre></td></tr></table></figure>

<ol>
<li>使用动画监听器<br>通过Animator.AnimationListener类可以创建事件处理程序</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Animator.AnimatorListener l = <span class="keyword">new</span> AnimatorListener() {</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span>(Animator animation){}</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span>(Animator animation){}</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span>(Animator animation){}</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span>(Animator animation){}</div><div class="line">}</div><div class="line">anim.addListener(l);</div></pre></td></tr></table></figure>

<h5 id="插值器">插值器</h5>
<p>默认情况下，在每个动画开始和结束值之间中所用的差值器是一个非线性的插值器<code>AccelerateDecelerateInterpolator</code>提供了开始加速和结束时减速的效果，SDK提供的插值器有：</p>
<ul>
<li>AccelerateDecelerateInterpolator 开始和结束时结束变化较慢，在中间的时候加速</li>
<li>AccelerateInterpolator 开始的时候向后，然后再向前急冲</li>
<li>AnticipateInterpolator 开始的时候向后，然后再向前急冲一定的值后，最后回到最终的值</li>
<li>BouceInterpolator 动画结束时弹回</li>
<li>DecelerateInterpolator 开始时速度变化较快，然后减速</li>
<li>LinearInterpolator 速度的变化是一个常量</li>
<li>OvershootInterpolator 开始时向前急冲，超过最终的值，然后再回来<br>通过<code>setInterpolator()</code>方法设置插值器，也可以实现<code>TimeInterpolator</code>类来指定一个自定义的差值算法。<h3 id="View_Animation">View Animation</h3>
View Animation包含了Tween Animation、Freme Animation<h4 id="Tween_Animation">Tween Animation</h4>
</li>
<li>存放路径：res/anim/filename.xml</li>
<li>引用：R.anim.filename(in java)、@[package:]anim/file</li>
<li>应用：<ul>
<li>Activity间的转换</li>
<li>Activity内布局间的转换</li>
<li>相同View中不同内容间的转换</li>
<li>为了用户提供反馈，例如提示进度、通过晃动输入框来说明错误或无效的数据输入<br>补间动画可以对View实现一系列的转换，比如：移动、渐变、伸缩、旋转<br>Tween Animation只能作用于View对象，只支持一部分属性，比如不支持背景颜色的改变。而且并不改变View对象本身，只是绘制的属性改变了，例如Button改变了位置，但是点击区域仍然不变。</li>
</ul>
</li>
</ul>
<ol>
<li>创建补间动画<br>补间动画使用<code>Animation</code>类来创建，可用的类型有</li>
</ol>
<ul>
<li>AlphaAnimation 可以改变View的透明度</li>
<li>RotateAnimation 可以在XY平面上旋转选中的View Canvas</li>
<li>ScaleAnimation 允许缩放选中的View</li>
<li>TraslateAnimation 在屏幕中移动选中的View(但只能在它原始边界范围内显示)<br>在xml中的定义格式如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:interpolator</span>=<span class="value">"@[package:]anim/interpolator_resouce"</span></div><div class="line">    <span class="attribute">android:shareInterpolator</span>=<span class="value">["true"|"false"]</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">alpha</span></span></div><div class="line">        <span class="attribute">android:fromAlpha</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toAlpha</span>=<span class="value">"float"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">scale</span></span></div><div class="line">        <span class="attribute">android:formXScale</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toXScale</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:formYScale</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toYScale</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">translate</span></span></div><div class="line">        <span class="attribute">android:fromXDelta</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toXDelta</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:fromYDelta</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toYDelta</span>=<span class="value">"float"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">rotate</span></span></div><div class="line">        <span class="attribute">android:fromDegress</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:toDegress</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span></div><div class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></div></pre></td></tr></table></figure>

<ol>
<li>使用补间动画<br>通过startAnimation方法可以将动画应用到任意View中，只要传递给这个方法应用的动画或动画集合即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ImageView image = (ImageView)findViewById(R.id.image);</div><div class="line">Animation hyperspcaJump = AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.hyperspace_jump);</div><div class="line">iamge.setRepeatMode(Animation.RESTART);  <span class="comment">// 循环 REVERSE为反向运行</span></div><div class="line">image.setRepeatCount(Animaion.INFINITE); <span class="comment">// 重复</span></div><div class="line">image.startAnimation(hyperspaceJump);</div></pre></td></tr></table></figure>

<ol>
<li>使用动画监听器<br>AnimationLister可以用于创建一个事件处理程序，当动画开始或结束的时候触发它，监听对象为Animation</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">myAnimationListener(<span class="keyword">new</span> AnimationListener(){</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span>(Animation animation){</div><div class="line">		<span class="comment">// 动画执行完成调用</span></div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span>(Animation animation){</div><div class="line">		<span class="comment">// 动画开始执行调用</span></div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span>(Animation animation){</div><div class="line">		<span class="comment">// 在动画重复的时候调用</span></div><div class="line">	}</div><div class="line">});</div></pre></td></tr></table></figure>

<ol>
<li>为布局和ViewGroup添加动画<br>LayoutAnimation可以用来为ViewGroup添加动画，并按照预定的顺序把一个动画(或者动画集合)应用到ViewGroup的每一个子View中。</li>
</ol>
<ul>
<li>LayoutAniamationController 可以选择每一个View的开始偏移时间(以毫秒为单位)，以及把动画应用到每一个子View中的顺序和起始时间(正向、反向、随机)</li>
<li>GridLayoutAnimationController 使用由行和列所映射的网格来向子View分配动画序列<h5 id="示例：">示例：</h5>
创建布局动画</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">layoutAnimation</span></span></div><div class="line">	xmlns:android="http://<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res</span>/<span class="attribute">android</span>"</div><div class="line">	<span class="attribute">android:delay</span>=<span class="value">"0.5"</span></div><div class="line">	<span class="attribute">android:animationOrder</span>=<span class="value">"random"</span></div><div class="line">	<span class="attribute">android:animation</span>=<span class="value">"anim/popin"</span>/&gt;</div></pre></td></tr></table></figure>

<p>使用布局动画<br>使用代码或者布局XML资源将其应用到一个ViewGroup中</p>
<ul>
<li>在XML中使用<code>andorid:layoutAnimation</code>来完成使用</li>
<li>在JAVA代码中使用<code>setLayoutAnimation</code>传递动画</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 载入动画</span></div><div class="line">Animation set = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.pop_in);</div><div class="line"><span class="comment">// 创建LayoutAnimation </span></div><div class="line">LayoutAnimationController controller = <span class="keyword">new</span> LayoutAnimationController(</div><div class="line">			set);</div><div class="line"><span class="comment">// 设置属性</span></div><div class="line">controller.setOrder(LayoutAnimationController.ORDER_REVERSE);</div><div class="line"><span class="comment">//设置控件显示间隔时间；</span></div><div class="line">controller.setDelay(<span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>通常情况动画会在ViewGroup第一次进行布局的时候执行一次，可以调用<code>scheduleLayoutAnimation</code>来强制动画再次执行，在View Grop下次布局的时候这个动画就会再次执行。<br>布局动画也支持动画监听</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aViewGroup.setLayoutAnimationListener(<span class="keyword">new</span> AnimationListener() {</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span>(Animation _animation){}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span>(Animation _animation){}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span>(Animation _animation){}</div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="Frame_animation">Frame animation</h4>
<p>帧动画是一系列的图片按顺序显示</p>
<ul>
<li>文件路径res/drawable/filename.xml</li>
<li>引用：R.drawable.filename(in java)、@[package:]drawable/file</li>
<li>xml文件格式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="title">animation-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:oneshot</span>=<span class="value">["true"</span> | "<span class="attribute">false</span>"] &gt;  </div><div class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@[package:]drawable/drawable_resource_name"</span></span></div><div class="line">    <span class="attribute">android:duration</span>=<span class="value">"integer"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);  </div><div class="line">rocketImage.setBackgroundResource(R.drawable.rocket_thrust);  </div><div class="line">rocketAnimation = (AnimationDrawable) rocketImage.getBackground();  </div><div class="line">rocketAnimation.start();</div></pre></td></tr></table></figure>

<p>注意点：start()不能再onCreat()中调用</p>
]]></content>
    <summary type="html"><![CDATA[<p>Android 3.0之后的动画框架<br>]]></summary>
    
      <category term="动画" scheme="http://zt1991616.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Animation" scheme="http://zt1991616.github.io/tags/Animation/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无线调试]]></title>
    <link href="http://zt1991616.github.io/2014/08/28/%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>http://zt1991616.github.io/2014/08/28/无线调试/</id>
    <published>2014-08-28T05:45:47.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>无需任何其他不相关的工具，便可无线调试程序<br><a id="more"></a></p>
<h2 id="环境条件">环境条件</h2>
<ol>
<li>确保设备与电脑运行在同一个wifi环境</li>
<li>Linux、OSX系统或者在windows上有可运行shell的软件(<a href="http://msysgit.github.io/" target="_blank" rel="external">msysgit</a>或<a href="http://www.cygwin.com/" target="_blank" rel="external">Cygwin</a>)，windows安装git时默认会安装gitbash也可以。</li>
<li>第一次运行需要用USB连接手机</li>
<li>确保配置了adb环境</li>
</ol>
<h2 id="Shell脚本">Shell脚本</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line">   </div><div class="line"><span class="comment">#Modify this with your IP range</span></div><div class="line">MY_IP_RANGE=<span class="string">"192\.168\.1"</span></div><div class="line"></div><div class="line"><span class="comment">#You usually wouldn't have to modify this</span></div><div class="line">PORT_BASE=<span class="number">5555</span></div><div class="line"></div><div class="line"><span class="comment">#List the devices on the screen for your viewing pleasure</span></div><div class="line">adb devices</div><div class="line"><span class="built_in">echo</span></div><div class="line"></div><div class="line"><span class="comment">#Find USB devices only (no emulators, genymotion or connected devices</span></div><div class="line"><span class="keyword">declare</span> <span class="operator">-a</span> deviceArray=(`adb devices <span class="operator">-l</span> | grep -v emulator | grep -v vbox | grep -v <span class="string">"<span class="variable">${MY_IP_RANGE}</span>"</span> | grep <span class="string">" device "</span> | awk <span class="string">'{print $1}'</span>`)  </div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"found <span class="variable">${#deviceArray[@]}</span> device(s)"</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="variable">${!deviceArray[*]}</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"finding IP address for device <span class="variable">${deviceArray[index]}</span>"</span></div><div class="line">IP_ADDRESS=$(adb <span class="operator">-s</span> <span class="variable">${deviceArray[index]}</span> shell ifconfig wlan0 | awk <span class="string">'{print $3}'</span>)</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"IP address found : <span class="variable">$IP_ADDRESS</span> "</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Connecting..."</span></div><div class="line">adb <span class="operator">-s</span> <span class="variable">${deviceArray[index]}</span> tcpip $((<span class="variable">$PORT_BASE</span> + <span class="variable">$index</span>))</div><div class="line">adb <span class="operator">-s</span> <span class="variable">${deviceArray[index]}</span> connect <span class="string">"<span class="variable">$IP_ADDRESS</span>:<span class="variable">$(($PORT_BASE + $index)</span>)"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line">adb devices <span class="operator">-l</span></div><div class="line"><span class="comment">#exit</span></div></pre></td></tr></table></figure>

<h2 id="使用">使用</h2>
<ol>
<li>USB连接手机</li>
<li>打开命令行，运行shell(windows右击gitbash运行)</li>
<li>出现以下画面变成功了 </li>
</ol>
<p><img src="/img/14082802.png" alt=""></p>
]]></content>
    <summary type="html"><![CDATA[<p>无需任何其他不相关的工具，便可无线调试程序<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="adb" scheme="http://zt1991616.github.io/tags/adb/"/>
    
      <category term="wifi" scheme="http://zt1991616.github.io/tags/wifi/"/>
    
      <category term="调试" scheme="http://zt1991616.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Indicator]]></title>
    <link href="http://zt1991616.github.io/2014/08/28/Indicator/"/>
    <id>http://zt1991616.github.io/2014/08/28/Indicator/</id>
    <published>2014-08-28T03:00:21.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>提供了一个水平滚动的Indicator<br><a id="more"></a><br><a href="https://github.com/pakerfeldt/android-viewflow" target="_blank" rel="external">viewflow</a></p>
<h2 id="绑定">绑定</h2>
<p>在java中绑定监听</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">viewFlow.setAdapter(<span class="keyword">new</span> ImageAdapter(<span class="keyword">this</span>),<span class="number">5</span>);</div><div class="line">CircleFlowIndicator indic = (CircleFlowIndicator) findViewById(R.id.viewflowindic);</div><div class="line">viewFlow.setFlowIndicator(indic);</div></pre></td></tr></table></figure>

<h2 id="自定义属性">自定义属性</h2>
<ul>
<li>activeColor 选中的颜色</li>
<li>inactiveColor 未选中的颜色</li>
<li>activeType 选中模式(fill填充 or stroke描边)</li>
<li>inactiveType 选中模式(fill填充 or stroke描边)</li>
<li>fadeOut 淡出时间(0为不淡出)</li>
<li>radius 半径</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">...CircleFlowIndicator</span></span></div><div class="line">	...</div><div class="line">	app:fadeOut=1000</div><div class="line">	app:radius="5dp"</div><div class="line">	app:activeType="fill"</div><div class="line">	app:activeColor="@color/<span class="attribute">blue</span>"</div><div class="line">	<span class="attribute">app:inactiveType</span>=<span class="value">"stroke"</span></div><div class="line">	<span class="attribute">app:inactiveColor</span>=<span class="value">"@color/white"</span></div><div class="line">	/&gt;</div></pre></td></tr></table></figure>

<p><a href="https://github.com/zt1991616/ViewFlowDemo" target="_blank" rel="external"></a></p>
<p><img src="/img/14082801.png" alt=""></p>
]]></content>
    <summary type="html"><![CDATA[<p>提供了一个水平滚动的Indicator<br>]]></summary>
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Indicator" scheme="http://zt1991616.github.io/tags/Indicator/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[单选ListView]]></title>
    <link href="http://zt1991616.github.io/2014/08/27/%E5%8D%95%E9%80%89ListView/"/>
    <id>http://zt1991616.github.io/2014/08/27/单选ListView/</id>
    <published>2014-08-27T10:51:44.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>实现单选必须要设置ListView为CHOICE_MODE_SINGLE(listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE)或android:choiceMode=”singleChoice”)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> cur_pos = <span class="number">0</span>;<span class="comment">// 当前显示的一行</span></div><div class="line"><span class="keyword">private</span> String[] items_text = { <span class="string">"选项一"</span>, <span class="string">"选项二"</span>, <span class="string">"选项三"</span>, <span class="string">"选项四"</span>, <span class="string">"选项五"</span> };</div><div class="line">  ...</div><div class="line">  <span class="keyword">final</span> Mydapter dapter = <span class="keyword">new</span> Mydapter(<span class="keyword">this</span>);</div><div class="line">  ListView listview = (ListView) findViewById(R.id.listView);</div><div class="line">  listview.setAdapter(dapter);</div><div class="line">  listview.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span>(AdapterView&lt;?&gt; arg0, View arg1,</div><div class="line">        <span class="keyword">int</span> position, <span class="keyword">long</span> id) {</div><div class="line">      cur_pos = position;<span class="comment">// 更新当前行</span></div><div class="line">      dapter.notifyDataSetChanged();</div><div class="line">    }</div><div class="line">  });</div></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mydapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>{</div><div class="line">    <span class="keyword">private</span> LayoutInflater inflater;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Mydapter</span>(Context context) {</div><div class="line">      inflater = (LayoutInflater) context</div><div class="line">          .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span>() {</div><div class="line">      <span class="keyword">return</span> items_text.length;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> Object <span class="title">getItem</span>(<span class="keyword">int</span> position) {</div><div class="line">      <span class="keyword">return</span> items_text[position];</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span>(<span class="keyword">int</span> position) {</div><div class="line">      <span class="keyword">return</span> position;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> View <span class="title">getView</span>(<span class="keyword">int</span> position, View convertView, ViewGroup parent) {</div><div class="line">      Log.e(<span class="string">"TEST"</span>, <span class="string">"refresh once"</span>);</div><div class="line">      convertView = inflater.inflate(R.layout.item, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">      TextView tv = (TextView) convertView.findViewById(R.id.tv);<span class="comment">// 显示文字</span></div><div class="line">      tv.setText(items_text[position]);</div><div class="line">      <span class="keyword">if</span> (position == cur_pos) {<span class="comment">// 如果当前的行就是ListView中选中的一行，就更改显示样式</span></div><div class="line">        convertView.setBackgroundColor(R.drawable.channel_list_item_bg_selected);<span class="comment">// 更改整行的背景色</span></div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> convertView;</div><div class="line">    }</div><div class="line">  }</div></pre></td></tr></table></figure>

<p><a href="https://github.com/zt1991616/SingleChoiceList/" target="_blank" rel="external">例子</a></p>
]]></content>
    
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用git命令]]></title>
    <link href="http://zt1991616.github.io/2014/08/27/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <id>http://zt1991616.github.io/2014/08/27/常用git命令/</id>
    <published>2014-08-27T00:36:56.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="常用配置">常用配置</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">--- system <span class="preprocessor">#系统级别</span></div><div class="line">--- <span class="keyword">global</span> <span class="preprocessor">#用户全局</span></div><div class="line">--local <span class="preprocessor">#单独一个项目</span></div><div class="line">git config --<span class="keyword">global</span> user.name <span class="string">"xxx"</span> <span class="preprocessor">#用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email <span class="string">"xxx@xxx.com"</span> <span class="preprocessor">#邮箱</span></div><div class="line">git config --<span class="keyword">global</span> core.editor vim <span class="preprocessor">#编辑器</span></div><div class="line"></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.st status <span class="preprocessor">#配置别名</span></div><div class="line">git config -l 列举所有配置</div></pre></td></tr></table></figure>

<h2 id="Git中3中状态的一些操作">Git中3中状态的一些操作</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将工作区的修改提交到暂存区</span></div><div class="line">git <span class="built_in">add</span> &lt;<span class="built_in">file</span>&gt;</div><div class="line">git <span class="built_in">add</span> . </div><div class="line"><span class="comment">#------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">#将暂存区的内容提交到版本库</span></div><div class="line">git commit &lt;<span class="built_in">file</span>&gt;</div><div class="line">git commit .</div><div class="line">git commit -<span class="operator">a</span> <span class="comment">#包括git add/ git rm /git commint 这三个操作，所有一般在操作工作区的时候，直接删除了文件，而不是使用git rm的，最后提交是可以用这个，如下</span></div><div class="line">              <span class="comment">#git commit -am "提交信息"</span></div><div class="line">git commit -amend <span class="comment">#修改最后一次提交的信息</span></div><div class="line"></div><div class="line"><span class="comment"># 抛弃工作区修改(使用当前暂存区的内容状态去覆盖工作区，从而达到抛弃工作区修改的作用)</span></div><div class="line">git checkout &lt;<span class="built_in">file</span>&gt;  </div><div class="line">git checkout .  </div><div class="line"></div><div class="line"><span class="comment">#------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">#改变暂存区的修改（其实是重置HEAD，将指定版本库的内容状态去覆盖暂存区，从而达到暂存区的改变）</span></div><div class="line">git reset &lt;<span class="built_in">file</span>&gt;  <span class="comment">#从暂存区恢复到工作区（不指定版本id，则默认为最后一次提交的版本id）</span></div><div class="line">git reset .  <span class="comment">#从暂存区恢复到工作区</span></div><div class="line">git reset $id <span class="comment"># 恢复到指定的提交版本，该$id之后的版本提交都恢复到工作区</span></div><div class="line">git reset <span class="comment">--hard $id #恢复到指定的提交版本，该$id之后的版本提交全部会被抛弃，将不出现在工作区</span></div><div class="line"></div><div class="line"><span class="comment">#注：如果不小心使用了错误的HEAD重置，会发现HEAD指向了重置的版本id，该版本之后的版本提交都不见了，使用git log也无法找到，需要使用下面的命令</span></div><div class="line">git reflog show master | head <span class="comment">#会显示所有版本纪录</span></div><div class="line">git reset <span class="comment">--hard $id #重新重置，至于--hard，根据将改变的内容放到工作区还是直接抛弃进行选择</span></div><div class="line"></div><div class="line"><span class="comment">#------------------------------------------</span></div><div class="line"><span class="comment">#恢复某次提交（某次提交的回滚操作，不影响其他的提交，所产生的效果创建一个新的版本提交去回滚指定的提交）</span></div><div class="line">git revert &lt;$id&gt;</div><div class="line">git revert HEAD</div><div class="line"><span class="comment">#revert和reset的差异：git reset是把HEAD向后移动了以下，而git revert是HEAD继续前进，只是新的内容和revert的内容正好相反</span></div><div class="line"></div><div class="line"><span class="comment">#------------------------------------------</span></div><div class="line"><span class="comment">#删除文件</span></div><div class="line"><span class="comment">#1.在工作区删除</span></div><div class="line">rm your_file <span class="comment">#直接在工作区删除文件</span></div><div class="line">git <span class="built_in">add</span> -u . <span class="comment">#将有改动的都提交到暂存区（包括修改的，删除的等操作）。git 2.0后不加-u也可以</span></div><div class="line">git commit -m <span class="string">"message"</span> <span class="comment">#提交到版本库</span></div><div class="line"></div><div class="line"><span class="comment">#2.同样在工作区删除</span></div><div class="line">rm your_file</div><div class="line">git commit -am <span class="string">"message"</span> <span class="comment">#-a包括了 git add/git rm/git commit三个操作</span></div><div class="line"></div><div class="line"><span class="comment">#3.使用git rm</span></div><div class="line">git rm &lt;<span class="built_in">file</span>&gt; <span class="comment">#不仅在工作区删除文件，同时将删除操作提交到暂存区</span></div><div class="line">git commit -m <span class="string">"message"</span> <span class="comment">#提交到版本库</span></div><div class="line"></div><div class="line"><span class="comment">#git rm其他补充</span></div><div class="line">git rm <span class="comment">--cached &lt;file&gt; #从暂存区中去除该文件，git将不再跟踪该文件的变更，但仍然在工作区内</span></div></pre></td></tr></table></figure>

<h2 id="文件直接比较差异Diff">文件直接比较差异Diff</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">git diff</span></span></div><div class="line">git diff &lt;file&gt; <span class="comment">#比较工作区与暂存区文件的差异</span></div><div class="line">git diff --cached <span class="comment">#比较暂存区和版本库差异</span></div><div class="line"></div><div class="line">git diff &lt;<span class="variable">$id2</span>&gt;&lt;<span class="variable">$id2</span>&gt; <span class="comment">#比较两次提交之间的差异</span></div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="comment">#比较两个分支之间的差异</span></div></pre></td></tr></table></figure>

<h2 id="分支">分支</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git branch -r <span class="comment">#查看远程分支</span></div><div class="line">git branch new_branch_name <span class="comment">#新建一个分支</span></div><div class="line">git branch --merged <span class="comment">#查看未被合并到当前分支的分支</span></div><div class="line"></div><div class="line">git checkout branch_name <span class="comment">#切换分支</span></div><div class="line">git checkout -b branch_name <span class="comment">#创建分支并切换</span></div><div class="line"></div><div class="line">git branch -d branch_name <span class="comment">#删除分支</span></div><div class="line">git branch -D branch_name <span class="comment">#强制删除分支</span></div><div class="line">git <span class="keyword">push</span> origin :branch_name <span class="comment">#删除远程分支（现在本地删除该分支），原理是把一个空分支push到server上，相对于删除该分支</span></div><div class="line"></div><div class="line"><span class="comment">#从远程clone项目，虽然远程上项目有分支，但是clone下来只有master分支，解决</span></div><div class="line">git checkout -b not_master_branch origin/not_master_branch <span class="comment">#本地创建一个分支，指向对应的远程分支</span></div><div class="line">git pull origin not_master_branch <span class="comment">#将远程的not_master_branch分支pull下来</span></div><div class="line">git <span class="keyword">push</span> origin not_master_branch <span class="comment">#将修改后的not_master_branch分支push到远程的not_master_branch分支</span></div></pre></td></tr></table></figure>

<h2 id="远程">远程</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git remote -v 			<span class="comment">#查看远程服务器地址和仓库名称</span></div><div class="line">git remote show origin	<span class="comment">#查看远程服务器仓库状态</span></div><div class="line">git remote add origin git<span class="variable">@github</span><span class="symbol">:robbin/robbin_site</span>.git 	<span class="comment">#添加远程仓库地址</span></div><div class="line">git remote set-url origin git<span class="variable">@github</span>.<span class="symbol">com:</span>robin/robbin 		<span class="comment">#修改远程仓库地址</span></div><div class="line">git remote rm <span class="comment">#删除远程仓库地址</span></div></pre></td></tr></table></figure>

<h2 id="从远程拉取内容、提交内容">从远程拉取内容、提交内容</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git fetch <span class="comment">#拉取</span></div><div class="line">git merge <span class="comment">#合并</span></div><div class="line">git pull <span class="comment">#git fetch + git merge</span></div><div class="line"></div><div class="line">git <span class="keyword">push</span> <span class="comment">#push所有分支</span></div><div class="line">git <span class="keyword">push</span> origin master <span class="comment">#将本地主分支推到远程主分支</span></div><div class="line">git <span class="keyword">push</span> -u origin master <span class="comment">#将本地主分支推到远程（如果远程无主分支则创建，用于初始化远程仓库）</span></div><div class="line">git <span class="keyword">push</span> origin &lt;local_brabch&gt; <span class="comment">#创建远程分支，origin是远程仓库名</span></div><div class="line">git <span class="keyword">push</span> origin &lt;local_brabch&gt;:&lt;remote_branch&gt; <span class="comment">#创建远程分支</span></div><div class="line">git <span class="keyword">push</span> origin :&lt;remote_branch&gt; <span class="comment">#先删除本地分支，然后再push删除远程分支</span></div></pre></td></tr></table></figure>

<h2 id="暂存管理">暂存管理</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">git stash #将工作区做的修改暂存到一个git栈中</span></span></div><div class="line">git stash list #查看栈中所有暂存</div><div class="line">git stach apply &lt;暂存编号&gt; <span class="comment">#恢复对应编号暂存到工作区，如果不指定编号为栈顶，操作中这些暂缓还在栈中</span></div><div class="line">git stach pop <span class="comment">#将栈顶的暂存恢复到工作区，并从栈中弹出</span></div><div class="line">git stach clear <span class="comment">#清空暂存区</span></div></pre></td></tr></table></figure>

<h2 id="创建远程库">创建远程库</h2>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> --bare git_url_path <span class="comment">#clone的时候，将其创建成远程仓库</span></div><div class="line">git --bare init <span class="comment">#初始化项目的时候，创建成远程仓库</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="git" scheme="http://zt1991616.github.io/tags/git/"/>
    
      <category term="Prose" scheme="http://zt1991616.github.io/categories/Prose/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android ViewFinder]]></title>
    <link href="http://zt1991616.github.io/2014/08/26/Android-ViewFinder/"/>
    <id>http://zt1991616.github.io/2014/08/26/Android-ViewFinder/</id>
    <published>2014-08-26T06:09:32.000Z</published>
    <updated>2014-09-05T15:06:35.000Z</updated>
    <content type="html"><![CDATA[<p>在基类BaseActivity中加入如下函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;E extends View&gt; E <span class="title">getView</span> (<span class="keyword">int</span> id) {</div><div class="line">	<span class="keyword">try</span> {</div><div class="line">		<span class="keyword">return</span> (E) findViewById(id);</div><div class="line">	} <span class="keyword">catch</span> (ClassCastException ex) {</div><div class="line">		Log.e(TAG,<span class="string">"Could not cast View to concrete class."</span>,ex);</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用ViewFinder类，封装了常用的方法。可以在Activity或View中调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewFinder</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">FindWrapper</span> </span>{</div><div class="line">		View findViewById(<span class="keyword">int</span> id);</div><div class="line">		Resources getResources();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowWrapper</span> <span class="keyword">implements</span> <span class="title">FindWapper</span> </span>{</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Window window;</div><div class="line"></div><div class="line">		WidowWrapper(<span class="keyword">final</span> Window window) {</div><div class="line">			<span class="keyword">this</span>.window = window;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">public</span> View <span class="title">findViewById</span>(<span class="keyword">final</span> <span class="keyword">int</span> id) {</div><div class="line">			<span class="keyword">return</span> window.findViewById(id);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">public</span> Resources <span class="title">getResources</span>() {</div><div class="line">			<span class="keyword">return</span> window.getContext().getResouces();</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span> <span class="keyword">implements</span> <span class="title">FindWrapper</span> </span>{</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> View view;</div><div class="line"></div><div class="line">		ViewWrapper(<span class="keyword">final</span> View view) {</div><div class="line">			<span class="keyword">this</span>.view = view;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">public</span> View <span class="title">findViewById</span>(<span class="keyword">int</span> id) {</div><div class="line">			<span class="keyword">return</span> view.findViewById(id);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">public</span> Resources <span class="title">getResources</span>() {</div><div class="line">			<span class="keyword">return</span> view.getResources();</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> FindWrapper wrapper;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ViewFinder</span>(<span class="keyword">final</span> View view) {</div><div class="line">		wrapper = <span class="keyword">new</span> ViewWrapper(view);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ViewFinder</span>(<span class="keyword">final</span> Window window) {</div><div class="line">		wrapper = <span class="keyword">new</span> WindowWrapper(window);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">ViewFinder</span>(<span class="keyword">final</span> Activity activity) {</div><div class="line">		<span class="keyword">this</span>(activity.getWindow());</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> &lt;V extends View&gt; V <span class="title">find</span> (<span class="keyword">final</span> <span class="keyword">int</span> id) {</div><div class="line">		<span class="keyword">return</span> (V) wrapper.findViewById(id);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ImageView <span class="title">imageView</span>(<span class="keyword">final</span> <span class="keyword">int</span> id) {</div><div class="line">		<span class="keyword">return</span> find(id);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> CompoundButton <span class="title">commpoudButton</span>(<span class="keyword">final</span> <span class="keyword">int</span> id) {</div><div class="line">		<span class="keyword">return</span> find(id);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> TextView <span class="title">textView</span>(<span class="keyword">final</span> <span class="keyword">int</span> id) {</div><div class="line">		<span class="keyword">return</span> find(id);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> TextView <span class="title">setText</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> CharSequence content) {</div><div class="line">		<span class="keyword">final</span> TextView text = find(id);</div><div class="line">		text.setText(content);</div><div class="line">		<span class="keyword">return</span> text;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> TextView <span class="title">setText</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> <span class="keyword">int</span> content) {</div><div class="line">		<span class="keyword">return</span> setText(id, wrapper.getResources().getString(content));</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> View <span class="title">onClick</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Runnable runnable) {</div><div class="line">		<span class="keyword">return</span> onClick(id, <span class="keyword">new</span> OnClickListener() {</div><div class="line"> </div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">				runnable.run();</div><div class="line">			}</div><div class="line">		});</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="keyword">final</span> OnClickListener listener, <span class="keyword">final</span> <span class="keyword">int</span>... ids) {</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> id : ids)</div><div class="line">			find(id).setOnClickListener(listener);</div><div class="line">	}</div><div class="line"></div><div class="line"> 	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="keyword">final</span> Runnable runnable, <span class="keyword">final</span> <span class="keyword">int</span>... ids) {</div><div class="line">		onClick(<span class="keyword">new</span> OnClickListener() {</div><div class="line"> </div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">				runnable.run();</div><div class="line">			}</div><div class="line">		}, ids);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ImageView <span class="title">setDrawable</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> <span class="keyword">int</span> drawable) {</div><div class="line">		ImageView image = imageView(id);</div><div class="line">		image.setImageDrawable(image.getResources().getDrawable(drawable));</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> CompoundButton <span class="title">onCheck</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> OnCheckedChangeListener listener) {</div><div class="line">		CompoundButton checkable = find(id);</div><div class="line">		checkable.setOnCheckedChangeListener(listener);</div><div class="line">		<span class="keyword">return</span> checkable;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> CompoundButton <span class="title">onCheck</span>(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Runnable runnable) {</div><div class="line">		<span class="keyword">return</span> onCheck(id, <span class="keyword">new</span> OnCheckedChangeListener() {</div><div class="line"> </div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span>(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked) {</div><div class="line">				runnable.run();</div><div class="line">			}</div><div class="line">		});</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span>(<span class="keyword">final</span> OnCheckedChangeListener listener, <span class="keyword">final</span> <span class="keyword">int</span>... ids) {</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> id : ids)</div><div class="line">			compoundButton(id).setOnCheckedChangeListener(listener);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span>(<span class="keyword">final</span> Runnable runnable, <span class="keyword">final</span> <span class="keyword">int</span>... ids) {</div><div class="line">		onCheck(<span class="keyword">new</span> OnCheckedChangeListener() {</div><div class="line"> </div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span>(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked) {</div><div class="line">				runnable.run();</div><div class="line">			}</div><div class="line">		}, ids);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Eclipse一些设置]]></title>
    <link href="http://zt1991616.github.io/2014/08/26/Eclipse%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
    <id>http://zt1991616.github.io/2014/08/26/Eclipse一些设置/</id>
    <published>2014-08-26T05:53:22.000Z</published>
    <updated>2014-09-05T15:06:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="显示行号">显示行号</h2>
<p>General -&gt; Editors -&gt; Text Editors -&gt; Show line numbers</p>
<h2 id="使用快捷键新建Android工程">使用快捷键新建Android工程</h2>
<p>General -&gt; Keys -&gt; Command 在其中找到New(Android Application Project) 设置为 Ctrl+Alt+A </p>
<h2 id="默认编码设置为UTF-8">默认编码设置为UTF-8</h2>
<p>General -&gt; Workspace -&gt; Text file encoding</p>
<h2 id="XML代码保存后自动格式化">XML代码保存后自动格式化</h2>
<p>Android —&gt; Editors —&gt; Always remove empty lines between elements：不要勾选，以确保个元素之间都有一个空行；Format on Save：勾选。</p>
<h2 id="Java代码保存时自动格式化：">Java代码保存时自动格式化：</h2>
<p>Java —&gt; Editor —&gt; Save Actions —&gt; Perform the selected actions on save<br>—&gt; 勾选 Format source code（如果是一个人写代码，可以勾选Format all lines；如果需要通过SVN/Git等与他人合作，一定不能勾选Format all lines而是勾选Format edited lines）</p>
<h2 id="Java代码中键入分号“;”、花括号“}”时自动调整位置：">Java代码中键入分号“;”、花括号“}”时自动调整位置：</h2>
<p>Java —&gt; Editor —&gt; Typing —&gt; Automatically insert at correct position 勾选Semicolons(分号)，Braces(花括号)</p>
<h2 id="安装color_theme">安装color theme</h2>
<p>Help→Install New Software -&gt; Add 添加 <a href="http://eclipse-color-theme.github.com/update" target="_blank" rel="external">http://eclipse-color-theme.github.com/update</a> 然后下一步下一步就好<br>安装完成 Window→Preferences→General→Appereance→Color Theme 选择自己喜欢的theme换上即可</p>
]]></content>
    
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[悲剧的开始]]></title>
    <link href="http://zt1991616.github.io/2014/08/26/first-post/"/>
    <id>http://zt1991616.github.io/2014/08/26/first-post/</id>
    <published>2014-08-26T02:01:30.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>之前的blog是使用<a href="www.gitpress.org">gitpress</a>，方便简单，只需要维护本地的一个工程就好。但是连续跪了两次了，毕竟是个小众的blog，个人开发者维护跟不上，决定转移到hexo上了。<br>GitHub page + hexo 确实是个不错的方案，模板也比较多，遂，投奔。</p>
]]></content>
    
    
      <category term="Prose" scheme="http://zt1991616.github.io/tags/Prose/"/>
    
      <category term="Prose" scheme="http://zt1991616.github.io/categories/Prose/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[悲剧的开始]]></title>
    <link href="http://zt1991616.github.io/2014/08/26/%E6%82%B2%E5%89%A7%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://zt1991616.github.io/2014/08/26/悲剧的开始/</id>
    <published>2014-08-26T02:01:30.000Z</published>
    <updated>2014-09-07T13:09:20.000Z</updated>
    <content type="html"><![CDATA[<p>之前的<a href="http://blog.zt1991616.gitpress.org/" target="_blank" rel="external">blog</a>是使用<a href="http://www.gitpress.org/" target="_blank" rel="external">gitpress</a>，方便简单，只需要维护本地的一个工程就好。但是连续跪了两次了，毕竟是个小众的blog，个人开发者维护跟不上，决定转移到hexo上了。<br>GitHub page + hexo 确实是个不错的方案，模板也比较多，遂，投奔。</p>
]]></content>
    
    
      <category term="杂文" scheme="http://zt1991616.github.io/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="杂文" scheme="http://zt1991616.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Anroid Studio开发工具新特性[Google IO 2014 Session]]]></title>
    <link href="http://zt1991616.github.io/2014/08/23/Anroid-Studio%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%96%B0%E7%89%B9%E6%80%A7%5BGoogle-IO-2014-Session%5D/"/>
    <id>http://zt1991616.github.io/2014/08/23/Anroid-Studio开发工具新特性[Google-IO-2014-Session]/</id>
    <published>2014-08-23T06:09:03.000Z</published>
    <updated>2014-09-05T15:06:35.000Z</updated>
    <content type="html"><![CDATA[<embed src="http://player.youku.com/player.php/sid/XNzYwMTU0ODUy/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">]]></content>
    
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android imageview scaletype属性]]></title>
    <link href="http://zt1991616.github.io/2014/08/21/android-imageview-scaletype%E5%B1%9E%E6%80%A7/"/>
    <id>http://zt1991616.github.io/2014/08/21/android-imageview-scaletype属性/</id>
    <published>2014-08-21T06:07:47.000Z</published>
    <updated>2014-09-05T15:06:36.000Z</updated>
    <content type="html"><![CDATA[<p>scaletype决定了图片在View上显示的方式，可以通过xml中定义<code>android:scale=</code>或者代码中调用<code>imageView.setScaleType()</code></p>
<p>示例的原图<br>128*128</p>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082111.gif" alt=""><br>640*428</p>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082112.gif" alt=""></p>
<ol>
<li>CENTER<br>按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示</li>
</ol>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082101.gif" alt=""><br><img src="https://github.com/zt1991616/blog/raw/master/Image/14082102.gif" alt=""></p>
<ol>
<li>CENTER_CROP<br>按比例扩大图片的size居中显示，使得图片长(宽)等于或大于view的长(宽)</li>
</ol>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082103.gif" alt=""><br><img src="https://github.com/zt1991616/blog/raw/master/Image/14082104.gif" alt=""></p>
<ol>
<li>CENTER_INSIDE<br>将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽 </li>
</ol>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082105.gif" alt=""><br><img src="https://github.com/zt1991616/blog/raw/master/Image/14082106.gif" alt=""></p>
<ol>
<li>FIT_CENTER<br>把图片按比例扩大/缩小到View的宽度，居中显示</li>
</ol>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082107.gif" alt=""><br><img src="https://github.com/zt1991616/blog/raw/master/Image/14082108.gif" alt=""></p>
<ol>
<li>FIT_START, FIT_END</li>
</ol>
<p>图片缩放效果上与FIT_CENTER一样，只是显示的位置不同，FIT_START是置于顶部，FIT_CENTER居中，FIT_END置于底部。</p>
<ol>
<li>FIT_XY<br>不按比例缩放图片，目标是把图片塞满整个View。</li>
</ol>
<p><img src="https://github.com/zt1991616/blog/raw/master/Image/14082109.gif" alt=""><br><img src="https://github.com/zt1991616/blog/raw/master/Image/14082110.gif" alt=""></p>
]]></content>
    
    
      <category term="Android" scheme="http://zt1991616.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://zt1991616.github.io/categories/Android/"/>
    
  </entry>
  
</feed>
